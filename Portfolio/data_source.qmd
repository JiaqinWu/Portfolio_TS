---
title: "Data Sources"
format:  
  html:
   embed-resources: true
   code-fold: true
---

```{r, echo=FALSE,message=FALSE,warning=FALSE}
library(tidyverse)
library(readxl)
library(ggplot2)
library(forecast)
library(astsa) 
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(data.table)
library(kableExtra)
```

# 1. Vaccination Rate

The dataset utilized in this project is from the **Our World in Data** [Github Repository](https://github.com/owid/covid-19-data/tree/master/public/data/vaccinations), a reputable and freely accessible data resource website. Our World in Data relies on the collaborative efforts of various contributors, making it a valuable platform for comprehensive datasets. Specifically, we leveraged state-by-state COVID-19 vaccination rate data sourced from the United States Centers for Disease Control and Prevention (CDC) daily updates, ensuring the reliability and accuracy of the information used in our analysis.

### Data Overview

```{r, message=FALSE,warning=FALSE}
vac_df <- read_csv("Datasets/us_state_vaccinations.csv")

# data glimpse
cols_show <- c('date', 'location', 'daily_vaccinations_per_million', 'people_vaccinated_per_hundred', 'people_fully_vaccinated_per_hundred')
t <- vac_df[, cols_show]
rbind(head(t, 3), tail(t, 3)) %>%
  kbl(row.names = FALSE) %>%
  kable_styling()
```

### Data dictionary

- `location`: name of the state or federal entity.
- `date`: date of the observation.
- `daily_vaccinations`: new doses administered per day (7-day smoothed). For countries that don't report data on a daily basis, we assume that doses changed equally on a daily basis over any periods in which no data was reported. This produces a complete series of daily figures, which is then averaged over a rolling 7-day window. An example of how we perform this calculation can be found [here](https://github.com/owid/covid-19-data/issues/333#issuecomment-763015298).
- `daily_vaccinations_per_million`: `daily_vaccinations` per 1,000,000 people in the total population of the state.
- `people_vaccinated`: total number of people who received at least one vaccine dose. If a person receives the first dose of a 2-dose vaccine, this metric goes up by 1. If they receive the second dose, the metric stays the same.
- `people_vaccinated_per_hundred`: `people_vaccinated` per 100 people in the total population of the state.
- `people_fully_vaccinated`: total number of people who received all doses prescribed by the initial vaccination protocol. If a person receives the first dose of a 2-dose vaccine, this metric stays the same. If they receive the second dose, the metric goes up by 1.
- `people_fully_vaccinated_per_hundred`: `people_fully_vaccinated` per 100 people in the total population of the state.


# 2. Newly Confirmed Cases & Death Cases

The dataset of newly death cases and confirmed case is from [US Health Statistic and Data trends](https://usafacts.org/visualizations/coronavirus-covid-19-spread-map/). However, the growing prevalence of at-home testing and the potential for individuals to contract the virus multiple times have skewed the government data we receive. These developments, plus the end of the public health emergency — and the required data reporting that came with it — have made it difficult for us to present a clear and reliable picture of COVID-19 in America. 

## Newly Confirmed Cases
### Data Overview 

```{r, message=FALSE,warning=FALSE}
wide_data <- read_csv("Datasets/covid_confirmed_usafacts.csv")

# Define the key and value columns for pivoting
key_cols <- c("countyFIPS", "County Name", "State", "StateFIPS")
value_cols <- setdiff(names(wide_data), key_cols)

# Pivot the data from wide to long
long_data <- pivot_longer(
  wide_data,
  cols = value_cols,
  names_to = "date",
  values_to = "value"
)

# Group by 'State' and 'date', and calculate the sum of Confirmed Cases
con_case_df <- long_data %>%
  group_by(State, date) %>%
  summarize(value_sum = sum(value, na.rm = TRUE))

# Calculate the daily new cases
con_case_df1 <- con_case_df %>%
  group_by(State) %>%
  mutate(new_cases = value_sum - lag(value_sum, default = 0))

# data glimpse
rbind(head(con_case_df1, 3), tail(con_case_df1, 3)) %>%
  kbl(row.names = FALSE) %>%
  kable_styling()
```

### Data dictionary

- `State`: abbreviate of the states.
- `value_sum`: total sum of confirmed cases.
- `new_cases`: number of newly confirmed cases in each day.


## Death Cases
### Data Overview 

```{r, message=FALSE,warning=FALSE}
wide_data <- read_csv("Datasets/covid_deaths_usafacts.csv")

# Define the key and value columns for pivoting
key_cols <- c("countyFIPS", "County Name", "State", "StateFIPS")
value_cols <- setdiff(names(wide_data), key_cols)

# Pivot the data from wide to long
long_data <- pivot_longer(
  wide_data,
  cols = value_cols,
  names_to = "date",
  values_to = "value"
)

# Group by 'State' and 'date', and calculate the sum of Confirmed Cases
dead_case_df <- long_data %>%
  group_by(State, date) %>%
  summarize(value_sum = sum(value, na.rm = TRUE))

# Calculate the daily new cases
dead_case_df1 <- dead_case_df %>%
  group_by(State) %>%
  mutate(new_cases = value_sum - lag(value_sum, default = 0))

# data glimpse
rbind(head(dead_case_df1, 3), tail(dead_case_df1, 3)) %>%
  kbl(row.names = FALSE) %>%
  kable_styling()
```

### Data dictionary

- `State`: abbreviate of the states.
- `value_sum`: total sum of death cases.
- `new_cases`: number of newly death cases in each day.

# 3. COVID-19 Hospitalization Number

The dataset is from the [U.S. Department of Health & Human Services](https://healthdata.gov/Hospital/COVID-19-Reported-Patient-Impact-and-Hospital-Capa/g62h-syeh/data_preview). After Friday September 29th, 2023, as a result of changes in reporting cadence, this dataset will be updated twice a week on Wednesdays and Fridays, so we choose the data before September 29th, 2023.

### Data Overview
```{r, message=FALSE,warning=FALSE}
hos_df <- read_csv('Datasets/COVID-19_hos.csv')

# data glimpse
cols_show <- c('state', 'date', 'inpatient_beds', 'inpatient_beds_used_covid', 'inpatient_bed_covid_utilization')
t <- hos_df[, cols_show]
rbind(head(t, 3), tail(t, 3)) %>%
  kbl(row.names = FALSE) %>%
  kable_styling()
```

### Data dictionary

- `inpatient_beds`: Reported total number of staffed inpatient beds including all overflow and surge/expansion beds used for inpatients (includes all ICU beds) in this state
- `inpatient_beds_used_covid`: Reported patients currently hospitalized in an inpatient bed who have suspected or confirmed COVID-19 in this state
- `inpatient_bed_covid_utilization`: Percentage of total (used/available) inpatient beds currently utilized by patients who have suspected or confirmed COVID-19 in this state. This number only accounts for hospitals in the state that report both "inpatient_beds_used_covid" and "inpatient_beds" fields.


# 4. Economic Indicators (GDP Per Capita & Unemployment Rate)

The GDP Per Capita data is sourced from the [Fred Economic Data](https://fred.stlouisfed.org/series/GDP), providing a quarterly perspective. On the other hand, the monthly Unemployment Rate data is obtained from the [KFF Database](https://www.kff.org/other/state-indicator/unemployment-rate/?currentTimeframe=0&sortModel=%7B%22colId%22:%22Location%22,%22sort%22:%22asc%22%7D). Together, these indicators offer insights into the economic landscape, reflecting both the country's per capita income trends and the dynamic nature of unemployment rates on a monthly basis.

## GDP Per Capita
### Data Overview
```{r, message=FALSE,warning=FALSE}
gdp <- read_csv('Datasets/gdp.csv')

# data glimpse
rbind(head(gdp, 3),  tail(gdp, 3)) %>%
  kbl(row.names = FALSE) %>%
  kable_styling()
```

## Unemployment Rate
### Data Overview
```{r, message=FALSE,warning=FALSE}
unemp <- read_csv('Datasets/unemployment.csv')
key_cols <- c("Location")
value_cols <- setdiff(names(unemp), key_cols)
unemp1 <- pivot_longer(
  unemp,
  cols = value_cols,
  names_to = "Time",
  values_to = "Unemployment"
)

# data glimpse
rbind(head(unemp1, 3), tail(unemp1, 3)) %>%
  kbl(row.names = FALSE) %>%
  kable_styling()
```


# 5. Medical Corporation (Pfizer) Stock Price

Stock price information for Pfizer (PFE) is retrieved from Yahoo Finance using the **quantmod** package in R. The adjusted closing prices are considered, offering a reflection of the stock's value while accounting for factors such as dividends and stock splits.

### Data Overview
```{r, message=FALSE,warning=FALSE}
# Set options to suppress warnings
options("getSymbols.warning4.0" = FALSE)
options("getSymbols.yahoo.warning" = FALSE)

# Define the tickers
tickers <- c("PFE")

# Loop through tickers to get stock data
for (ticker in tickers) {
  getSymbols(ticker,
             from = "2020-01-01",
             to = "2024-01-01")
}

# Create a data frame with adjusted closing prices
stock <- data.frame(date = index(PFE), value = Ad(PFE))

# data glimpse
rbind(head(stock, 3), tail(stock, 3)) %>%
  kbl(row.names = FALSE) %>%
  kable_styling()
```

### Data dictionary

- `PFE.Adjusted`: Adjusted cloning stock price for Pfizer Inc.


# 6. Party Support Rate

The data on party support rates is sourced from the [YouGov Website](https://today.yougov.com/topics/politics/trackers/the-republican-party-favorability?crossBreak=democrat). This dataset reveals the evolving sentiments of US citizens towards political parties, capturing both favorable and unfavorable attitudes over time.

### Data Overview
```{r, message=FALSE,warning=FALSE}
demo <- read_excel('Datasets/party.xlsx',sheet = 'Democrat')
inde <- read_excel('Datasets/party.xlsx',sheet = 'Independent')
rep <- read_excel('Datasets/party.xlsx',sheet = 'Republican')

# Transform the wide dataframe into a long dataframe
key_cols <- c("Attitude")
value_cols <- setdiff(names(demo), key_cols)
demo1 <- pivot_longer(
  demo,
  cols = value_cols,
  names_to = "Time",
  values_to = "democrat"
)

inde1 <- pivot_longer(
  inde,
  cols = value_cols,
  names_to = "Time",
  values_to = "independent"
)

rep1 <- pivot_longer(
  rep,
  cols = value_cols,
  names_to = "Time",
  values_to = "republican"
)

# Combine these three datasets together
combined_data <- full_join(demo1, inde1, by = c("Time", "Attitude")) %>%
  full_join(rep1, by = c("Time", "Attitude"))

# data glimpse
rbind(head(combined_data, 3), tail(combined_data, 3)) %>%
  kbl(row.names = FALSE) %>%
  kable_styling()
```












